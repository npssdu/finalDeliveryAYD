"""
Script de prueba para verificar la integraci√≥n LLM
"""

import sys
import os

# Agregar el directorio padre al path para poder importar gui_simulator
parent_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.insert(0, parent_dir)

def test_llm_connector():
    """Prueba b√°sica del conector LLM."""
    print("üß™ TESTING LLM CONNECTOR")
    print("=" * 30)
    
    try:
        from gui_simulator.llm_connector import LLMManager
        
        # Inicializar manager
        print("1. Inicializando LLM Manager...")
        manager = LLMManager()
        
        # Verificar conectores disponibles
        available = manager.get_available_connectors()
        print(f"2. Conectores disponibles: {available}")
        
        if available:
            print("‚úÖ LLM Manager inicializado correctamente")
            
            # Prueba de an√°lisis
            print("\n3. Probando an√°lisis de descripci√≥n...")
            test_description = "a purple forest at dusk"
            analysis = manager.analyze_description(test_description)
            print(f"An√°lisis resultado: {analysis.get('success', False)}")
            
            # Prueba de generaci√≥n (solo si hay conectores)
            print("\n4. Probando generaci√≥n SVG...")
            result = manager.generate_svg_enhanced(test_description)
            print(f"Generaci√≥n exitosa: {result.get('success', False)}")
            print(f"Fuente: {result.get('source', 'unknown')}")
            
            return True
        else:
            print("‚ö†Ô∏è No hay conectores LLM disponibles")
            print("Configura OpenAI API key o instala transformers")
            return False
            
    except ImportError as e:
        print(f"‚ùå Error importando m√≥dulos: {e}")
        return False
    except Exception as e:
        print(f"‚ùå Error en prueba: {e}")
        return False

def test_gui_integration():
    """Prueba la integraci√≥n con la GUI."""
    print("\nüñ•Ô∏è TESTING GUI INTEGRATION")
    print("=" * 30)
    
    try:
        # Verificar que se puede importar la clase principal
        from gui_simulator.main import DrawingWithLLMsGUI
        print("‚úÖ Clase principal importada correctamente")
        
        # Verificar que tkinter est√° disponible
        import tkinter as tk
        root = tk.Tk()
        root.withdraw()  # No mostrar ventana
        
        print("‚úÖ Tkinter disponible")
        
        # Verificar que se puede crear la instancia (sin mostrar)
        # Esto verificar√° que todas las importaciones est√°n correctas
        print("1. Verificando inicializaci√≥n...")
        
        # Esto deber√≠a funcionar sin errores
        gui = DrawingWithLLMsGUI(root)
        print("‚úÖ GUI inicializada correctamente")
        
        # Verificar que el LLM manager est√° disponible
        if hasattr(gui, 'llm_manager'):
            print("‚úÖ LLM Manager integrado en GUI")
        else:
            print("‚ùå LLM Manager no encontrado en GUI")
            
        root.destroy()
        return True
        
    except ImportError as e:
        print(f"‚ùå Error importando GUI: {e}")
        return False
    except Exception as e:
        print(f"‚ùå Error en integraci√≥n GUI: {e}")
        return False

def test_dependencies():
    """Verifica las dependencias necesarias."""
    print("\nüì¶ TESTING DEPENDENCIES")
    print("=" * 30)
    
    dependencies = {
        'tkinter': 'GUI framework',
        'pandas': 'Data processing',
        'numpy': 'Numerical operations',
        'openai': 'OpenAI API (opcional)',
        'requests': 'HTTP requests',
        'transformers': 'HuggingFace models (opcional)'
    }
    
    results = {}
    
    for dep, description in dependencies.items():
        try:
            __import__(dep)
            results[dep] = "‚úÖ Disponible"
        except ImportError:
            if dep in ['openai', 'transformers']:
                results[dep] = "‚ö†Ô∏è Opcional - No instalado"
            else:
                results[dep] = "‚ùå Requerido - No disponible"
    
    print("Estado de dependencias:")
    for dep, status in results.items():
        print(f"  {dep}: {status}")
    
    # Verificar si hay al menos una opci√≥n LLM
    has_llm = results.get('openai', '').startswith('‚úÖ') or results.get('transformers', '').startswith('‚úÖ')
    
    if has_llm:
        print("\n‚úÖ Al menos una opci√≥n LLM est√° disponible")
    else:
        print("\n‚ö†Ô∏è Ninguna opci√≥n LLM disponible - solo modo tradicional")
    
    return has_llm

def main():
    """Ejecuta todas las pruebas."""
    print("üöÄ TESTING GUI SIMULATOR CON LLM INTEGRATION")
    print("=" * 50)
    
    # Test 1: Dependencias
    deps_ok = test_dependencies()
    
    # Test 2: LLM Connector
    llm_ok = test_llm_connector()
    
    # Test 3: GUI Integration
    gui_ok = test_gui_integration()
    
    print("\n" + "=" * 50)
    print("üìã RESUMEN DE PRUEBAS")
    print("=" * 50)
    
    print(f"Dependencias: {'‚úÖ OK' if deps_ok else '‚ö†Ô∏è Parcial'}")
    print(f"LLM Connector: {'‚úÖ OK' if llm_ok else '‚ö†Ô∏è Limitado'}")
    print(f"GUI Integration: {'‚úÖ OK' if gui_ok else '‚ùå Error'}")
    
    if gui_ok:
        print("\nüéâ Sistema listo para usar!")
        print("Ejecuta: python -m gui_simulator.main")
        
        if not llm_ok:
            print("\nüí° Para habilitar LLM:")
            print("1. pip install openai")
            print("2. export OPENAI_API_KEY=tu_key")
    else:
        print("\n‚ùå Hay problemas que resolver antes de usar el sistema")
    
    return gui_ok and (llm_ok or deps_ok)

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
